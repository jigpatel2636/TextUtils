{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","react_default","a","createElement","className","style","id","isd","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","class","Alert","props","alert","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","react_router_dom","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","showAlert","split","filter","item","length","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4bb54117.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function About() {\n  const [myStyle, setMyStyle] = useState({\n      color: 'black',\n      backgroundColor: 'white '\n  })\n  \n  const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\n  const toggleStyle = () => {\n      if(myStyle.color === 'black') {\n        setMyStyle({\n            color: 'white',\n            backgroundColor: 'black',\n            border: '2px solid white'\n        })\n        setBtnText(\"Enable Light Mode\")\n      }\n      else {\n          setMyStyle({\n            color: 'black',\n            backgroundColor: 'white'\n          })\n          setBtnText(\"Enable Dark Mode\")\n      }\n  }\n  return (\n    <div>\n      <div className=\"container\" style={myStyle}>\n        <h2 className=\"my-3\">About Us</h2>\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" isd=\"headingOne\">\n              <button\n                className=\"accordion-button\"\n                style={myStyle}\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseOne\"\n                aria-expanded=\"true\"\n                aria-controls=\"collapseOne\"\n              >\n                Accordion Item #1\n              </button>\n            </h2>\n            <div\n              id=\"collapseOne\"\n              className=\"accordion-collapse collapse show\"\n              aria-labelledby=\"headingOne\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\" style={myStyle}>\n                <strong>This is the first item's accordion body.</strong> It is\n                shown by default, until the collapse plugin adds the appropriate\n                classes that we use to style each element. These classes control\n                the overall appearance, as well as the showing and hiding via\n                CSS transitions. You can modify any of this with custom CSS or\n                overriding our default variables. It's also worth noting that\n                just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\n              <button\n                className=\"accordion-button collapsed\"\n                style={myStyle}\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseTwo\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseTwo\"\n              >\n                Accordion Item #2\n              </button>\n            </h2>\n            <div\n              id=\"collapseTwo\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingTwo\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\" style={myStyle}>\n                <strong>This is the second item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" id=\"headingThree\">\n              <button\n                className=\"accordion-button collapsed\"\n                style={myStyle}\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseThree\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseThree\"\n              >\n                Accordion Item #3\n              </button>\n            </h2>\n            <div\n              id=\"collapseThree\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingThree\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\" style={myStyle}>\n                <strong>This is the third item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container my-2\">\n          <button onClick={toggleStyle} type=\"button\" class=\"btn btn-primary\">\n            {btntext}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Alert(props) {\n    const capitalize = (word) =>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\n    }\n  return (\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\" role=\"search\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\n              Search \n            </button>\n          </form> */}\n          <div className={`form-check form-switch text-${props.mode==='light'? 'dark' : 'light'}`} >\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = { \n    title: PropTypes.string.isRequired, \n    aboutText: PropTypes.string \n};\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'about Text here'\n  };","import React, {useState} from 'react'\n\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=> {\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to UpperCase\", \"success\")\n    }\n    const handleLowerClick = () => {\n      let newText = text.toLowerCase();\n      setText(newText)\n      props.showAlert(\"Converted to LowerCase\", \"success\")\n    }\n    const HandleOnChange = (event) => {\n        setText(event.target.value)\n    }\n    const ClearText = () => {\n      let newText = \"\"\n      setText(newText)\n      props.showAlert(\"Text is cleared\", \"success\")\n    }\n  const [text, setText] = useState('Enter text here');\n//   setText('New Text')\n  return (\n    <>\n    <div className=\"container\" style={{color:props.mode==='light'? 'black' : 'white'}}>\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n        <textarea className=\"form-control\" value={text} onChange={HandleOnChange} style={{backgroundColor:props.mode==='light'? 'white' : 'grey', color:props.mode==='light'?'black':'white' }} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} style={{backgroundColor:props.mode==='light'? 'blue' : '#05245ab8'}}>Convert to UpperCase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowerClick} style={{backgroundColor:props.mode==='light'? 'blue' : '#05245ab8'}}>Convert to LowerCase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={ClearText} style={{backgroundColor:props.mode==='light'? 'blue' : '#05245ab8'}} >Clear Text</button>\n    </div>\n    <div className=\"my-3\" style={{color:props.mode==='light'? 'black' : 'white'}}>\n      <h2>Your Text Summary</h2>\n      <p>{text.split(\" \").filter(item => item).length} words and {text.length} characters</p>\n      <p>{0.008 * text.split(\" \").length} minutes to read</p>\n      <h2>Preview</h2>\n      <p>{text}</p>\n    </div>\n    </>\n  )\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n      setAlert({\n        msg:message,\n        type:type\n      })\n      setTimeout(()=> {\n        setAlert(null)\n      },1500)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#05245ab8'\n      showAlert(\"Dark mode is enabled\", \"success\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode is enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"About US\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Routes>\n          <Route exact path=\"/about\" element={<About />}>\n          </Route>\n          <Route  exact path=\"/\"  element={<TextForm heading=\"Enter Your Text\" mode={mode} showAlert={showAlert} />}>\n          </Route>\n      </Routes>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}